<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension="\\" #>
<#
    CustomT4Host host           = (CustomT4Host) Host;
    CodeWriterTypeScript writer = (CodeWriterTypeScript) host.CodeWriter;

    var model                   = host.CurrentModel;
    var entityTypes             = model.GetEntityTypes();
    var enumTypes               = model.GetEnumTypes();
    var complexTypes            = model.GetComplexTypes();
#>
// Type definitions for the Microsoft Graph API
// Project: https://github.com/microsoftgraph/msgraph-typescript-typings
// Definitions by: Microsoft Graph Team <https://github.com/microsoftgraph>

<#= writer.WriteHeader() #>

export as namespace microsoftgraph;

<# foreach(var enumType in enumTypes) { #>
export type <#= enumType.Name.UpperCaseFirstChar() #> = <#= enumType.GetEnumValues() #>
<# } #>
<#
  foreach(var entityType in entityTypes)
    {
        var methods = entityType.Methods;
#>

export interface <#= entityType.Name.UpperCaseFirstChar() #><# if (entityType.Base != null) { #> extends <#=  entityType.Base.Name.UpperCaseFirstChar() #><# }#> {

<# foreach(var prop in entityType.Properties.ToList()) { #>
	<# if (prop.LongDescription != null) { #>
    /** <#=prop.LongDescription#> */
	<# } #>
	<# if (prop.IsNullable == false) { #>
        <#=  prop.Name #>: <#= prop.GetTypeString() #>
	<# } else { #>
        <#=  prop.Name #>?: <#= prop.GetTypeString() #>
	<# } #>

<# } #>
}
<#
    }
#>
<#
  foreach(var complexType in complexTypes)
  {
#>
export interface <#= complexType.Name.UpperCaseFirstChar()#><# if (complexType.Base != null) { #> extends <#=  complexType.Base.Name.UpperCaseFirstChar() #><# }#> {

<# foreach(var prop in complexType.Properties) { #>
	<# if (prop.LongDescription != null) { #>
    /** <#=prop.LongDescription#> */
	<# } #>
	<# if (prop.IsNullable == false) { #>
        <#= prop.Name #>: <#= prop.GetTypeString() #>
	<# } else { #>
        <#= prop.Name #>?: <#= prop.GetTypeString() #>
	<# } #>

<# } #>
}
<# } #>
